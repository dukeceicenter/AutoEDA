version: '3.8'

services:
  mcp-agent-client:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_SERVER_HOST=host.docker.internal
    volumes:
      - ./designs:/app/designs:ro
      - ./config:/app/config:ro
      - ./libraries:/app/libraries:ro
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
    networks:
      - mcp-network
    depends_on:
      - mcp-servers
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-servers:
    build:
      context: .
      dockerfile: docker/Dockerfile.servers
    ports:
      - "13333:13333"  # Synthesis Setup
      - "13334:13334"  # Synthesis Compile
      - "13335:13335"  # Floorplan
      - "13336:13336"  # Power Planning
      - "13337:13337"  # Placement
      - "13338:13338"  # CTS
      - "13339:13339"  # Routing
      - "13440:13440"  # Save Design
    environment:
      - EDA_TOOLS_HOST=${EDA_TOOLS_HOST:-host.docker.internal}
      - SNPSLMD_LICENSE_FILE=${SNPSLMD_LICENSE_FILE}
      - CDS_LIC_FILE=${CDS_LIC_FILE}
      - PYTHONPATH=/app
    volumes:
      - ./designs:/app/designs
      - ./config:/app/config:ro
      - ./libraries:/app/libraries:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
    networks:
      - mcp-network
    restart: unless-stopped
    command: >
      sh -c "
        python3 server/synth_setup_server.py --port 13333 &
        python3 server/synth_compile_server.py --port 13334 &
        python3 server/floorplan_server.py --port 13335 &
        python3 server/powerplan_server.py --port 13336 &
        python3 server/placement_server.py --port 13337 &
        python3 server/cts_server.py --port 13338 &
        python3 server/route_server.py --port 13339 &
        python3 server/save_server.py --port 13440 &
        wait
      "
    healthcheck:
      test: ["CMD", "python3", "docker/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  mcp-network:
    driver: bridge

volumes:
  logs:
  deliverables: 